generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int                 @id @default(autoincrement()) @map("user_id")
  name                       String
  phone                      String              @unique
  passwordHash               String              @map("password_hash")
  role                       UserRole            @default(CUSTOMER)
  status                     UserStatus          @default(ACTIVE)
  createdAt                  DateTime            @default(now()) @map("created_at")
  auditLogs                  AuditLog[]
  customerWallet             CustomerWallet?
  driverProfile              Driver?
  loyalty                    Loyalty?
  customerOrders             Order[]             @relation("CustomerOrders")
  driverOrders               Order[]             @relation("DriverOrders")
  ratings                    Rating[]
  restaurantProfile          Restaurant?
  adminWalletActions         WalletTransaction[] @relation("AdminWalletActions")
  customerWalletTransactions WalletTransaction[] @relation("CustomerWalletTransactions")

  @@map("users")
}

model Driver {
  id                  Int                  @id @map("driver_id")
  vehicleType         VehicleType          @default(BIKE) @map("vehicle_type")
  currentLat          Decimal?             @map("current_lat") @db.Decimal(10, 6)
  currentLng          Decimal?             @map("current_lng") @db.Decimal(10, 6)
  isAvailable         Boolean              @default(true) @map("is_available")
  walletBalance       Decimal              @default(0.00) @map("wallet_balance") @db.Decimal(10, 2)
  rating              Float?               @default(5)
  licenseNumber       String               @map("license_number")
  vehicleRegistration String               @map("vehicle_registration")
  documentUrls        String?              @map("document_urls") @db.LongText
  approvalStatus      DriverApprovalStatus @default(PENDING) @map("approval_status")
  onlineAt            DateTime?            @map("online_at")
  totalDeliveries     Int                  @default(0) @map("total_deliveries")
  completionRate      Float?               @default(100) @map("completion_rate")
  lastDeliveryAt      DateTime?            @map("last_delivery_at")
  driverWallet        DriverWallet?
  user                User                 @relation(fields: [id], references: [id], onDelete: Cascade)
  orderTracking       OrderTracking[]
  ratings             Rating[]             @relation("DriverRatings")
  supportTickets      SupportTicket[]
  walletTransactions  WalletTransaction[]
  // HYBRID SYSTEM: Driver assignment relationships
  driverAssignments   DriverAssignment[]
  driverState         DriverState?

  @@map("drivers")
}

model Restaurant {
  id               Int               @id @map("restaurant_id")
  name             String
  address          String
  lat              Decimal           @db.Decimal(10, 6)
  lng              Decimal           @db.Decimal(10, 6)
  logoUrl          String?           @map("logo_url")
  bannerUrl        String?           @map("banner_url")
  rating           Float?            @default(0)
  totalOrders      Int               @default(0) @map("total_orders")
  description      String?
  businessLicense  String?           @map("business_license")
  approved         Boolean           @default(false)
  geofenceZoneId   Int?              @map("geofence_zone_id")
  commissionRate   Decimal           @default(15.00) @map("commission_rate") @db.Decimal(5, 2)
  status           RestaurantStatus  @default(OPEN)
  categories       Category[]
  menus            Menu[]
  orders           Order[]
  ratings          Rating[]          @relation("RestaurantRatings")
  restaurantWallet RestaurantWallet?
  geofenceZone     GeofenceZone?     @relation(fields: [geofenceZoneId], references: [id])
  user             User              @relation(fields: [id], references: [id], onDelete: Cascade)
  supportTickets   SupportTicket[]

  @@index([geofenceZoneId], map: "restaurants_geofence_zone_id_fkey")
  @@map("restaurants")
}

model Category {
  id           Int        @id @default(autoincrement()) @map("category_id")
  restaurantId Int        @map("restaurant_id")
  name         String
  slug         String     @unique
  icon         String?
  sortOrder    Int        @default(0) @map("sort_order")
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menus        Menu[]

  @@unique([restaurantId, name], name: "unique_restaurant_category_name")
  @@map("categories")
}

model Menu {
  id           Int         @id @default(autoincrement()) @map("menu_id")
  restaurantId Int         @map("restaurant_id")
  itemName     String      @map("item_name")
  description  String?
  price        Decimal     @db.Decimal(10, 2)
  imageUrl     String?     @map("image_url")
  isAvailable  Boolean     @default(true) @map("is_available")
  categoryId   Int?        @map("category_id")
  category     Category?   @relation(fields: [categoryId], references: [id])
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]

  @@index([categoryId], map: "menus_category_id_fkey")
  @@index([restaurantId], map: "menus_restaurant_id_fkey")
  @@map("menus")
}

model Order {
  id                    Int             @id @default(autoincrement()) @map("order_id")
  customerId            Int             @map("customer_id")
  restaurantId          Int             @map("restaurant_id")
  driverId              Int?            @map("driver_id")
  totalPrice            Decimal         @map("total_price") @db.Decimal(10, 2)
  deliveryFee           Decimal         @map("delivery_fee") @db.Decimal(10, 2)
  status                OrderStatus     @default(PENDING)
  pickupAddress         String?         @map("pickup_address")
  pickupLat             Decimal?        @map("pickup_lat") @db.Decimal(10, 6)
  pickupLng             Decimal?        @map("pickup_lng") @db.Decimal(10, 6)
  pickupInstructions    String?         @map("pickup_instructions")
  estimatedPickupTime   DateTime?       @map("estimated_pickup_time")
  deliveryAddress       String          @map("delivery_address")
  deliveryLat           Decimal?        @map("delivery_lat") @db.Decimal(10, 6)
  deliveryLng           Decimal?        @map("delivery_lng") @db.Decimal(10, 6)
  deliveryInstructions  String?         @map("delivery_instructions")
  driverEarning         Decimal         @default(0.00) @map("driver_earning") @db.Decimal(10, 2)
  deliveryDistance      Decimal?        @map("delivery_distance") @db.Decimal(8, 2)
  estimatedDeliveryTime Int?            @map("estimated_delivery_time")
  paymentMethod         PaymentMethod   @default(CASH) @map("payment_method")
  paymentStatus         PaymentStatus   @default(PENDING) @map("payment_status")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  acceptedAt            DateTime?       @map("accepted_at")
  preparingAt           DateTime?       @map("preparing_at")
  pickedUpAt            DateTime?       @map("picked_up_at")
  deliveredAt           DateTime?       @map("delivered_at")
  // HYBRID SYSTEM: Enhanced tracking fields
  driverAssignedAt      DateTime?       @map("driver_assigned_at")
  readyAt               DateTime?       @map("ready_at")
  arrivedAtRestaurantAt DateTime?       @map("arrived_at_restaurant_at")
  cancelledBy           CancelledBy?    @map("cancelled_by")
  cancelReason          CancelReason?   @map("cancel_reason")
  driverCancelReason    DriverCancelReason? @map("driver_cancel_reason")
  orderRating           Float?          @default(0) @map("order_rating")
  itemsSubtotal         Decimal         @default(0.00) @map("items_subtotal") @db.Decimal(10, 2)
  deliveryCommission    Decimal         @default(0.00) @map("delivery_commission") @db.Decimal(10, 2)
  platformEarnings      Decimal         @default(0.00) @map("platform_earnings") @db.Decimal(10, 2)
  restaurantCommission  Decimal         @map("restaurant_commission") @db.Decimal(10, 2)
  orderItems            OrderItem[]
  orderTracking         OrderTracking[]
  customer              User            @relation("CustomerOrders", fields: [customerId], references: [id])
  driver                User?           @relation("DriverOrders", fields: [driverId], references: [id])
  restaurant            Restaurant      @relation(fields: [restaurantId], references: [id])
  ratings               Rating[]        @relation("OrderRatings")
  supportTickets        SupportTicket[]
  // HYBRID SYSTEM: Driver assignment relationships
  driverAssignments     DriverAssignment[]

  @@index([customerId], map: "orders_customer_id_fkey")
  @@index([driverId], map: "orders_driver_id_fkey")
  @@index([restaurantId], map: "orders_restaurant_id_fkey")
  @@map("orders")
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  orderId  Int     @map("order_id")
  menuId   Int     @map("menu_id")
  quantity Int     @default(1)
  price    Decimal @db.Decimal(10, 2)
  menu     Menu    @relation(fields: [menuId], references: [id])
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([menuId], map: "order_items_menu_id_fkey")
  @@index([orderId], map: "order_items_order_id_fkey")
  @@map("order_items")
}

model OrderTracking {
  id        Int      @id @default(autoincrement()) @map("tracking_id")
  orderId   Int      @map("order_id")
  driverId  Int      @map("driver_id")
  lat       Decimal  @db.Decimal(10, 6)
  lng       Decimal  @db.Decimal(10, 6)
  timestamp DateTime @default(now())
  driver    Driver   @relation(fields: [driverId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([driverId], map: "order_tracking_driver_id_fkey")
  @@index([orderId], map: "order_tracking_order_id_fkey")
  @@map("order_tracking")
}

model CustomerWallet {
  customerId  Int       @id @map("customer_id")
  balance     Decimal   @default(0.00) @map("balance") @db.Decimal(10, 2)
  isActive    Boolean   @default(true) @map("is_active")
  totalTopUps Decimal   @default(0.00) @map("total_topups") @db.Decimal(10, 2)
  totalSpent  Decimal   @default(0.00) @map("total_spent") @db.Decimal(10, 2)
  lastTopUpAt DateTime? @map("last_topup_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  customer    User      @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_wallets")
}

model RestaurantWallet {
  restaurantId        Int        @id @map("restaurant_id")
  balance             Decimal    @default(0.00) @map("balance") @db.Decimal(10, 2)
  totalEarnings       Decimal    @default(0.00) @map("total_earnings") @db.Decimal(10, 2)
  totalCommissionPaid Decimal    @default(0.00) @map("total_commission_paid") @db.Decimal(10, 2)
  totalPayouts        Decimal    @default(0.00) @map("total_payouts") @db.Decimal(10, 2)
  isActive            Boolean    @default(true) @map("is_active")
  lastEarningAt       DateTime?  @map("last_earning_at")
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")
  restaurant          Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("restaurant_wallets")
}

model DriverWallet {
  driverId         Int       @id @map("driver_id")
  balance          Decimal   @default(0.00) @map("balance") @db.Decimal(10, 2)
  collateralAmount Decimal   @default(0.00) @map("collateral_amount") @db.Decimal(10, 2)
  minCollateral    Decimal   @default(1000.00) @map("min_collateral") @db.Decimal(10, 2)
  totalEarnings    Decimal   @default(0.00) @map("total_earnings") @db.Decimal(10, 2)
  totalWithdrawn   Decimal   @default(0.00) @map("total_withdrawn") @db.Decimal(10, 2)
  canWithdraw      Boolean   @default(false) @map("can_withdraw")
  isActive         Boolean   @default(true) @map("is_active")
  lastEarningAt    DateTime? @map("last_earning_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  driver           Driver    @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("driver_wallets")
}

model WalletTransaction {
  id            Int                     @id @default(autoincrement()) @map("transaction_id")
  customerId    Int?                    @map("customer_id")
  driverId      Int?                    @map("driver_id")
  amount        Decimal                 @db.Decimal(10, 2)
  type          WalletTransactionType
  status        WalletTransactionStatus @default(PENDING)
  description   String?
  screenshotUrl String?                 @map("screenshot_url")
  adminId       Int?                    @map("admin_id")
  adminNotes    String?                 @map("admin_notes")
  createdAt     DateTime                @default(now()) @map("created_at")
  processedAt   DateTime?               @map("processed_at")
  admin         User?                   @relation("AdminWalletActions", fields: [adminId], references: [id])
  customer      User?                   @relation("CustomerWalletTransactions", fields: [customerId], references: [id])
  driver        Driver?                 @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@index([adminId], map: "wallet_transactions_admin_id_fkey")
  @@index([customerId], map: "wallet_transactions_customer_id_fkey")
  @@index([driverId], map: "wallet_transactions_driver_id_fkey")
  @@map("wallet_transactions")
}

model Loyalty {
  customerId     Int       @id @map("customer_id")
  totalOrders    Int       @default(0) @map("total_orders")
  loyaltyPoints  Int       @default(0) @map("loyalty_points")
  lastRewardedAt DateTime? @map("last_rewarded_at")
  customer       User      @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("loyalty")
}

model GeofenceZone {
  id                 Int               @id @default(autoincrement()) @map("zone_id")
  name               String
  polygonCoordinates String            @map("polygon_coordinates") @db.LongText
  status             GeofenceStatus    @default(ACTIVE)
  deliveryFeeRules   DeliveryFeeRule[]
  restaurants        Restaurant[]
  // HYBRID SYSTEM: Driver state relationships
  driverStates       DriverState[]

  @@map("geofencing")
}

model DeliveryFeeRule {
  id        Int                 @id @default(autoincrement()) @map("rule_id")
  ruleType  DeliveryFeeRuleType @map("rule_type")
  baseFee   Decimal             @map("base_fee") @db.Decimal(10, 2)
  perKmRate Decimal?            @map("per_km_rate") @db.Decimal(10, 2)
  minFee    Decimal             @map("min_fee") @db.Decimal(10, 2)
  maxFee    Decimal             @map("max_fee") @db.Decimal(10, 2)
  zoneId    Int?                @map("zone_id")
  active    Boolean             @default(true)
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")
  zone      GeofenceZone?       @relation(fields: [zoneId], references: [id])

  @@index([zoneId], map: "delivery_fee_rules_zone_id_fkey")
  @@map("delivery_fee_rules")
}

model AuditLog {
  id             Int        @id @default(autoincrement()) @map("log_id")
  adminId        Int        @map("admin_id")
  action         String
  targetEntityId Int        @map("target_entity_id")
  entityType     EntityType @map("entity_type")
  details        String     @db.LongText
  timestamp      DateTime   @default(now())
  admin          User       @relation(fields: [adminId], references: [id])

  @@index([adminId], map: "audit_logs_admin_id_fkey")
  @@map("audit_logs")
}

model SupportTicket {
  id           Int                 @id @default(autoincrement()) @map("ticket_id")
  orderId      Int                 @map("order_id")
  customerId   Int                 @map("customer_id")
  driverId     Int?                @map("driver_id")
  restaurantId Int?                @map("restaurant_id")
  issueType    SupportIssueType    @map("issue_type")
  status       SupportTicketStatus @default(OPEN)
  notes        String?
  createdAt    DateTime            @default(now()) @map("created_at")
  resolvedAt   DateTime?           @map("resolved_at")
  driver       Driver?             @relation(fields: [driverId], references: [id])
  order        Order               @relation(fields: [orderId], references: [id])
  restaurant   Restaurant?         @relation(fields: [restaurantId], references: [id])

  @@index([driverId], map: "support_tickets_driver_id_fkey")
  @@index([orderId], map: "support_tickets_order_id_fkey")
  @@index([restaurantId], map: "support_tickets_restaurant_id_fkey")
  @@map("support_tickets")
}

model Rating {
  id           Int         @id @default(autoincrement()) @map("rating_id")
  customerId   Int         @map("customer_id")
  ratingType   RatingType  @map("rating_type")
  restaurantId Int?        @map("restaurant_id")
  orderId      Int?        @map("order_id")
  rating       Int
  comment      String?     @db.Text
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  driverId     Int?        @map("driver_id")
  customer     User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  driver       Driver?     @relation("DriverRatings", fields: [driverId], references: [id], onDelete: Cascade)
  order        Order?      @relation("OrderRatings", fields: [orderId], references: [id], onDelete: Cascade)
  restaurant   Restaurant? @relation("RestaurantRatings", fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([customerId, restaurantId], name: "unique_customer_restaurant_rating")
  @@unique([customerId, orderId], name: "unique_customer_order_rating")
  @@unique([customerId, driverId], name: "unique_customer_driver_rating")
  @@index([driverId], map: "ratings_driver_id_fkey")
  @@index([orderId], map: "ratings_order_id_fkey")
  @@index([restaurantId], map: "ratings_restaurant_id_fkey")
  @@map("ratings")
}

// =====================================================
// HYBRID DRIVER ASSIGNMENT SYSTEM - NEW MODELS
// =====================================================

model DriverAssignment {
  id          String                    @id @default(cuid()) @map("assignment_id")
  orderId     Int                       @map("order_id")
  driverId    Int                       @map("driver_id")
  status      DriverAssignmentStatus    @default(OFFERED)
  wave        Int                       @default(1)
  offeredAt   DateTime                  @default(now()) @map("offered_at")
  respondedAt DateTime?                 @map("responded_at")
  acceptedAt  DateTime?                 @map("accepted_at")
  expiresAt   DateTime?                 @map("expires_at")
  reason      String?                   @db.VarChar(191)
  createdAt   DateTime                  @default(now()) @map("created_at")
  updatedAt   DateTime                  @updatedAt @map("updated_at")
  
  // Relationships
  order       Order                     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver      Driver                    @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([orderId], map: "driver_assignments_order_id_fkey")
  @@index([driverId], map: "driver_assignments_driver_id_fkey")
  @@index([status, expiresAt], map: "driver_assignments_status_expires_idx")
  @@index([wave, offeredAt], map: "driver_assignments_wave_offered_idx")
  @@map("driver_assignments")
}

model DriverState {
  driverId                  Int           @id @map("driver_id")
  isOnline                  Boolean       @default(false) @map("is_online")
  activeAssignmentsCount    Int           @default(0) @map("active_assignments_count")
  maxConcurrentAssignments  Int           @default(1) @map("max_concurrent_assignments")
  currentZoneId             Int?          @map("current_zone_id")
  lastHeartbeatAt           DateTime?     @map("last_heartbeat_at")
  onlineSince               DateTime?     @map("online_since")
  lastLocationUpdate        DateTime?     @map("last_location_update")
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  
  // Relationships
  driver                    Driver        @relation(fields: [driverId], references: [id], onDelete: Cascade)
  currentZone               GeofenceZone? @relation(fields: [currentZoneId], references: [id])
  
  // Indexes for performance
  @@index([isOnline, activeAssignmentsCount], map: "driver_state_availability_idx")
  @@index([currentZoneId], map: "driver_state_zone_id_fkey")
  @@index([lastHeartbeatAt], map: "driver_state_heartbeat_idx")
  @@map("driver_state")
}

enum UserRole {
  CUSTOMER
  DRIVER
  RESTAURANT
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  PENDING
}

enum VehicleType {
  BIKE
}

enum DriverApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum RestaurantStatus {
  OPEN
  CLOSED
  SUSPENDED
}

enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  READY
  PICKED_UP
  DELIVERING
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  WALLET
  UPI
}

enum PaymentStatus {
  PENDING
  ESCROWED
  PAID
  FAILED
  REFUNDED
}

enum WalletTransactionType {
  CUSTOMER_TOPUP
  CUSTOMER_ORDER_PAYMENT
  CUSTOMER_REFUND
  DRIVER_COLLATERAL_DEPOSIT
  DRIVER_EARNING
  DRIVER_WITHDRAWAL
  DRIVER_PENALTY
  RESTAURANT_ORDER_EARNING
  RESTAURANT_COMMISSION_DEDUCTION
  RESTAURANT_PAYOUT
  CREDIT
  DEBIT
  TOPUP
  COMMISSION
}

enum WalletTransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GeofenceStatus {
  ACTIVE
  INACTIVE
}

enum DeliveryFeeRuleType {
  FLAT
  DISTANCE
  ZONE
  HYBRID
}

enum EntityType {
  DRIVER
  RESTAURANT
  ORDER
  WALLET
}

enum SupportIssueType {
  FOOD
  DELIVERY
  PAYMENT
  OTHER
}

enum SupportTicketStatus {
  OPEN
  RESOLVED
  CLOSED
}

enum RatingType {
  RESTAURANT
  ORDER
  DRIVER
}

// =====================================================
// HYBRID DRIVER ASSIGNMENT SYSTEM - NEW ENUMS
// =====================================================

enum DriverAssignmentStatus {
  OFFERED
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
  COMPLETED
}

enum CancelledBy {
  CUSTOMER
  RESTAURANT
  DRIVER
  SYSTEM
}

enum CancelReason {
  CUSTOMER_CHANGED_MIND
  OUT_OF_STOCK
  NO_DRIVER_FOUND
  RESTAURANT_TIMEOUT
  ADDRESS_ISSUE
  DRIVER_CANCEL_PREP
  DRIVER_EMERGENCY
}

enum DriverCancelReason {
  VEHICLE_ISSUE
  EMERGENCY
  LONG_WAIT
  WRONG_ADDRESS
  RESTAURANT_DELAY
}
